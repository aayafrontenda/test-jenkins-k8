pipeline {
    agent any // Adjust this label according to your Jenkins setup

    environment {
        USERNAME = vault path: 'secrets/creds/aayadev', key: 'username'
        PASSWORD = vault path: 'secrets/creds/aayadev', key: 'password'
    }
    
    triggers {
        githubPullRequests(
            spec: 'H/5 * * * *',
            triggerMode: 'HEAVY_HOOKS',
            events: [
                [ $class: 'org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent' ]
            ]
        )
    }

    stages {
        stage('Debug Environment') {
            steps {
                script {
                    echo "CHANGE_TARGET: ${env.CHANGE_TARGET}"
                }
            }
        }

        // Temporarily remove the 'when' condition for troubleshooting
        stage('Check Branch') {
            steps {
                echo "Triggering on target branch: ${env.CHANGE_TARGET}"
            }
        }

        stage('Retrieve Vault Token') {
            environment {
                VAULT_TOKEN = credentials('vault-token') // Retrieve the Vault token from Jenkins credentials
            }
            steps {
                script {
                    echo "Success"
                }
            }
        }

        stage('Test Vault Connection') {
            steps {
                script {
                    try {
                        sh '''
                            export VAULT_ADDR='http://127.0.0.1:8200'
                            vault login $VAULT_TOKEN
                            vault kv get secret/creds/aayadev
                        '''
                    } catch (Exception e) {
                        echo "Error connecting to Vault: ${e.message}"
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    sh """
                        echo \$DOCKER_PASS | docker login -u \$DOCKER_LOGIN --password-stdin
                    """
                }
            }
        }

        stage('Stop and Remove Containers') {
            steps {
                script {
                    sh '''
                        docker system prune -f
                        docker compose -f docker-compose-staging.yml down --volumes
                        docker compose -f docker-compose-staging.yml rm -f
                        docker images --filter "dangling=true" -q | xargs -r docker rmi -f
                        docker volume ls -qf dangling=true | xargs -r docker volume rm
                    '''
                }
            }
        }

        stage('Build and Start Docker Images') {
            steps {
                script {
                    sh '''
                        docker compose -f docker-compose-staging.yml build --no-cache
                        docker compose -f docker-compose-staging.yml up -d
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up any remaining resources or perform any final steps here if needed
                echo 'Pipeline completed'
            }
        }
    }
}
