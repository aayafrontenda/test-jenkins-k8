pipeline {
    agent any // Adjust this label according to your Jenkins setup

    parameters {
        string(name: 'branch_name', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        VAULT_TOKEN = credentials('vault-token') 
    }   

    // triggers {
    //     githubPullRequests(
    //         spec: 'H/5 * * * *',
    //         triggerMode: 'HEAVY_HOOKS',
    //         events: [
    //             [ $class: 'org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent' ]
    //         ]
    //     )
    // }

    stages {
        stage('Debug Environment') {
            steps {
                script {
                    echo "CHANGE_TARGET: ${env.CHANGE_TARGET}"
                    echo "BRANCH_NAME: ${params.branch_name}"
                }
            }
        }

        stage('Check Branch') {
            steps {
                echo "Triggering on target branch: ${env.CHANGE_TARGET}"
            }
        }

        stage('Test Vault Connection') {
            steps {
                script {
                    try {
                        sh '''
                            export VAULT_ADDR='http://127.0.0.1:8200'
                            vault login ${VAULT_TOKEN}
                        '''
                    } catch (Exception e) {
                        echo "Error connecting to Vault: ${e.message}"
                    }
                }
            }
        }

         stage('Validate Branch') {
            steps {
                script {
                    def branchExists = sh(script: "git ls-remote --heads https://github.com/aayafrontenda/test-jenkins-k8.git ${params.branch_name}", returnStatus: true) == 0
                    if (!branchExists) {
                        error "Branch '${params.branch_name}' does not exist in the repository."
                    } else {
                        echo "Branch '${params.branch_name}' exists."
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.branch_name}"]],
                        userRemoteConfigs: [[url: 'https://github.com/aayafrontenda/test-jenkins-k8.git']],
                    ])
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    sh '''
                        export VAULT_ADDR=http://127.0.0.1:8200
                        DOCKER_LOGIN=$(vault kv get -field='username' secrets/docker)
                        DOCKER_PASS=$(vault kv get -field='password' secrets/docker)
                        echo $DOCKER_PASS | docker login -u $DOCKER_LOGIN --password-stdin
                    '''
                }
            }
        }

        // stage('Stop and Remove Containers') {
        //     steps {
        //         script {
        //             sh '''
        //                 docker system prune -f
        //                 docker compose -f docker-compose-staging.yml down --volumes
        //                 docker compose -f docker-compose-staging.yml rm -f
        //                 docker images --filter "dangling=true" -q | xargs -r docker rmi -f
        //                 docker volume ls -qf dangling=true | xargs -r docker volume rm
        //             '''
        //         }
        //     }
        // }

        // stage('Build and Start Docker Images') {
        //     steps {
        //         script {
        //             sh '''
        //                 docker compose -f docker-compose-staging.yml build --no-cache
        //                 docker compose -f docker-compose-staging.yml up -d
        //             '''
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                // Clean up any remaining resources or perform any final steps here if needed
                echo 'Pipeline completed'
            }
        }
    }
}
